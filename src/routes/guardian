const express = require('express');
const { body, param, validationResult } = require('express-validator');
const { poolPromise, sql } = require('../config/db');
const winston = require('winston');

const router = express.Router();

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),
    new winston.transports.File({ filename: 'logs/combined.log' }),
  ],
});

const validateTutor = [
  body('id_niño').isUUID().withMessage('ID del niño debe ser un UUID válido'),
  body('nombre').notEmpty().isString().withMessage('Nombre es requerido'),
  body('relacion').isIn(['Madre', 'Padre', 'Tutor Legal']).withMessage('Relación debe ser Madre, Padre o Tutor Legal'),
  body('nacionalidad').isUUID().withMessage('Nacionalidad debe ser un UUID válido'),
  body('identificacion').optional().isString().withMessage('Identificación debe ser una cadena válida'),
  body('telefono')
    .optional()
    .isString()
    .matches(/^\+?[\d\s\-()]{7,15}$/)
    .withMessage('Teléfono debe ser un número válido (e.g., +1-809-532-0001)'),
  body('email')
    .optional()
    .isEmail()
    .withMessage('Email debe ser válido'),
  body('direccion').optional().isString().withMessage('Dirección debe ser una cadena válida'),
];

const validateUUID = param('id').isUUID().withMessage('ID inválido');

/**
 * @swagger
 * components:
 *   schemas:
 *     Tutor:
 *       type: object
 *       properties:
 *         id_tutor:
 *           type: string
 *           format: uuid
 *           description: Identificador único del tutor
 *           example: "123e4567-e89b-12d3-a456-426614174000"
 *         id_niño:
 *           type: string
 *           format: uuid
 *           description: ID del niño asociado
 *           example: "4A3B2C1D-1234-5678-9012-3456789ABCDE"
 *         nombre:
 *           type: string
 *           description: Nombre del tutor
 *           example: "María Pérez"
 *         relacion:
 *           type: string
 *           description: Relación con el niño
 *           example: "Madre"
 *         nacionalidad:
 *           type: string
 *           format: uuid
 *           description: ID del país de nacionalidad
 *           example: "3031019A-8658-4567-B284-D610A8AC7766"
 *         identificacion:
 *           type: string
 *           nullable: true
 *           description: Número de identificación del tutor
 *           example: "123-4567890-1"
 *         telefono:
 *           type: string
 *           nullable: true
 *           description: Teléfono del tutor
 *           example: "+1-809-532-0001"
 *         email:
 *           type: string
 *           nullable: true
 *           description: Email del tutor
 *           example: "maria.perez@example.com"
 *         direccion:
 *           type: string
 *           nullable: true
 *           description: Dirección del tutor
 *           example: "Calle Principal 123, Santo Domingo"
 *         estado:
 *           type: string
 *           description: Estado del tutor
 *           example: "Activo"
 *       required:
 *         - id_tutor
 *         - id_niño
 *         - nombre
 *         - relacion
 *         - nacionalidad
 *         - estado
 *     TutorInput:
 *       type: object
 *       properties:
 *         id_niño:
 *           type: string
 *           format: uuid
 *           description: ID del niño asociado
 *           example: "4A3B2C1D-1234-5678-9012-3456789ABCDE"
 *         nombre:
 *           type: string
 *           description: Nombre del tutor
 *           example: "María Pérez"
 *         relacion:
 *           type: string
 *           description: Relación con el niño
 *           example: "Madre"
 *         nacionalidad:
 *           type: string
 *           format: uuid
 *           description: ID del país de nacionalidad
 *           example: "3031019A-8658-4567-B284-D610A8AC7766"
 *         identificacion:
 *           type: string
 *           nullable: true
 *           description: Número de identificación del tutor
 *           example: "123-4567890-1"
 *         telefono:
 *           type: string
 *           nullable: true
 *           description: Teléfono del tutor
 *           example: "+1-809-532-0001"
 *         email:
 *           type: string
 *           nullable: true
 *           description: Email del tutor
 *           example: "maria.perez@example.com"
 *         direccion:
 *           type: string
 *           nullable: true
 *           description: Dirección del tutor
 *           example: "Calle Principal 123, Santo Domingo"
 *       required:
 *         - id_niño
 *         - nombre
 *         - relacion
 *         - nacionalidad
 * tags:
 *   - name: Tutors
 *     description: Gestión de tutores
 */

/**
 * @swagger
 * /api/guardians:
 *   get:
 *     summary: Listar todos los tutores
 *     tags: [Tutors]
 *     responses:
 *       200:
 *         description: Lista de tutores obtenida exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Tutor'
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Error al obtener tutores
 */
router.get('/', async (req, res, next) => {
  try {
    logger.info('Obteniendo tutores', { ip: req.ip });
    const pool = await poolPromise;
    const result = await pool.request().execute('sp_ObtenerTutores');
    res.status(200).json(result.recordset);
  } catch (err) {
    logger.error('Error al obtener tutores', { error: err.message, ip: req.ip });
    const error = new Error('Error al obtener tutores');
    error.statusCode = 500;
    next(error);
  }
});

/**
 * @swagger
 * /api/guardians/{id}:
 *   get:
 *     summary: Obtener un tutor por ID
 *     tags: [Tutors]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID del tutor
 *     responses:
 *       200:
 *         description: Tutor obtenido exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Tutor'
 *       400:
 *         description: ID inválido
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Validación fallida
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       msg:
 *                         type: string
 *                       param:
 *                         type: string
 *                       location:
 *                         type: string
 *       404:
 *         description: Tutor no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Tutor no encontrado
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Error al obtener tutor
 */
router.get('/:id', validateUUID, async (req, res, next) => {
  try {
    logger.info('Obteniendo tutor por ID', { id: req.params.id, ip: req.ip });
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn('Validación fallida', { id: req.params.id, errors: errors.array(), ip: req.ip });
      const error = new Error('Validación fallida');
      error.statusCode = 400;
      error.data = errors.array();
      throw error;
    }
    const pool = await poolPromise;
    const result = await pool
      .request()
      .input('id_tutor', sql.UniqueIdentifier, req.params.id)
      .execute('sp_ObtenerTutorPorId');
    if (result.recordset.length === 0) {
      logger.warn('Tutor no encontrado', { id: req.params.id, ip: req.ip });
      const error = new Error('Tutor no encontrado');
      error.statusCode = 404;
      throw error;
    }
    res.status(200).json(result.recordset[0]);
  } catch (err) {
    logger.error('Error al obtener tutor', { id: req.params.id, error: err.message, ip: req.ip });
    err.statusCode = err.statusCode || 500;
    next(err);
  }
});

/**
 * @swagger
 * /api/guardians:
 *   post:
 *     summary: Crear un nuevo tutor
 *     tags: [Tutors]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/TutorInput'
 *           example:
 *             id_niño: "4A3B2C1D-1234-5678-9012-3456789ABCDE"
 *             nombre: "María Pérez"
 *             relacion: "Madre"
 *             nacionalidad: "3031019A-8658-4567-B284-D610A8AC7766"
 *             identificacion: "123-4567890-1"
 *             telefono: "+1-809-532-0001"
 *             email: "maria.perez@example.com"
 *             direccion: "Calle Principal 123, Santo Domingo"
 *     responses:
 *       201:
 *         description: Tutor creado exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Tutor'
 *       400:
 *         description: Error en los datos enviados
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Validación fallida
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       msg:
 *                         type: string
 *                       param:
 *                         type: string
 *                       location:
 *                         type: string
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Error al crear tutor
 */
router.post('/', validateTutor, async (req, res, next) => {
  try {
    logger.info('Creando tutor', { nombre: req.body.nombre, ip: req.ip });
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn('Validación fallida', { errors: errors.array(), ip: req.ip });
      const error = new Error('Validación fallida');
      error.statusCode = 400;
      error.data = errors.array();
      throw error;
    }
    const pool = await poolPromise;
    const result = await pool
      .request()
      .input('id_niño', sql.UniqueIdentifier, req.body.id_niño)
      .input('nombre', sql.NVarChar, req.body.nombre)
      .input('relacion', sql.NVarChar, req.body.relacion)
      .input('nacionalidad', sql.UniqueIdentifier, req.body.nacionalidad)
      .input('identificacion', sql.NVarChar, req.body.identificacion || null)
      .input('telefono', sql.NVarChar, req.body.telefono || null)
      .input('email', sql.NVarChar, req.body.email || null)
      .input('direccion', sql.NVarChar, req.body.direccion || null)
      .execute('sp_CrearTutor');
    res.status(201).json(result.recordset[0]);
  } catch (err) {
    logger.error('Error al crear tutor', { error: err.message, ip: req.ip });
    const error = new Error('Error al crear tutor');
    error.statusCode = err.number === 50001 ? 400 : 500;
    error.data = err.message;
    next(error);
  }
});

/**
 * @swagger
 * /api/guardians/{id}:
 *   put:
 *     summary: Actualizar un tutor
 *     tags: [Tutors]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID del tutor
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/TutorInput'
 *           example:
 *             id_niño: "4A3B2C1D-1234-5678-9012-3456789ABCDE"
 *             nombre: "María Pérez"
 *             relacion: "Madre"
 *             nacionalidad: "3031019A-8658-4567-B284-D610A8AC7766"
 *             identificacion: "123-4567890-1"
 *             telefono: "+1-809-532-0001"
 *             email: "maria.perez@example.com"
 *             direccion: "Calle Principal 123, Santo Domingo"
 *     responses:
 *       204:
 *         description: Tutor actualizado exitosamente
 *       400:
 *         description: Error en los datos enviados
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Validación fallida
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       msg:
 *                         type: string
 *                       param:
 *                         type: string
 *                       location:
 *                         type: string
 *       404:
 *         description: Tutor no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Tutor no encontrado
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Error al actualizar tutor
 */
router.put('/:id', [validateUUID, validateTutor], async (req, res, next) => {
  try {
    logger.info('Actualizando tutor', { id: req.params.id, nombre: req.body.nombre, ip: req.ip });
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn('Validación fallida', { id: req.params.id, errors: errors.array(), ip: req.ip });
      const error = new Error('Validación fallida');
      error.statusCode = 400;
      error.data = errors.array();
      throw error;
    }
    const pool = await poolPromise;
    await pool
      .request()
      .input('id_tutor', sql.UniqueIdentifier, req.params.id)
      .input('id_niño', sql.UniqueIdentifier, req.body.id_niño)
      .input('nombre', sql.NVarChar, req.body.nombre)
      .input('relacion', sql.NVarChar, req.body.relacion)
      .input('nacionalidad', sql.UniqueIdentifier, req.body.nacionalidad)
      .input('identificacion', sql.NVarChar, req.body.identificacion || null)
      .input('telefono', sql.NVarChar, req.body.telefono || null)
      .input('email', sql.NVarChar, req.body.email || null)
      .input('direccion', sql.NVarChar, req.body.direccion || null)
      .execute('sp_ActualizarTutor');
    res.status(204).send();
  } catch (err) {
    logger.error('Error al actualizar tutor', { id: req.params.id, error: err.message, ip: req.ip });
    err.statusCode = err.statusCode || 500;
    next(err);
  }
});

/**
 * @swagger
 * /api/guardians/{id}:
 *   delete:
 *     summary: Eliminar un tutor
 *     tags: [Tutors]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID del tutor
 *     responses:
 *       204:
 *         description: Tutor eliminado exitosamente
 *       400:
 *         description: ID inválido
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Validación fallida
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       msg:
 *                         type: string
 *                       param:
 *                         type: string
 *                       location:
 *                         type: string
 *       404:
 *         description: Tutor no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Tutor no encontrado
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Error al eliminar tutor
 */
router.delete('/:id', validateUUID, async (req, res, next) => {
  try {
    logger.info('Eliminando tutor', { id: req.params.id, ip: req.ip });
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn('Validación fallida', { id: req.params.id, errors: errors.array(), ip: req.ip });
      const error = new Error('Validación fallida');
      error.statusCode = 400;
      error.data = errors.array();
      throw error;
    }
    const pool = await poolPromise;
    await pool
      .request()
      .input('id_tutor', sql.UniqueIdentifier, req.params.id)
      .execute('sp_EliminarTutor');
    res.status(204).send();
  } catch (err) {
    logger.error('Error al eliminar tutor', { id: req.params.id, error: err.message, ip: req.ip });
    err.statusCode = err.statusCode || 500;
    next(err);
  }
});

/**
 * @swagger
 * /api/guardians/children/{id}:
 *   get:
 *     summary: Obtener todos los tutores asociados a un niño
 *     tags: [Tutors]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *         description: ID del niño
 *     responses:
 *       200:
 *         description: Lista de tutores obtenida exitosamente
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Tutor'
 *       400:
 *         description: ID inválido
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Validación fallida
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       msg:
 *                         type: string
 *                       param:
 *                         type: string
 *                       location:
 *                         type: string
 *       404:
 *         description: Niño no encontrado
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Niño no encontrado
 *       500:
 *         description: Error interno del servidor
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: Error al obtener tutores
 */
router.get('/children/:id', validateUUID, async (req, res, next) => {
  try {
    logger.info('Obteniendo tutores por niño', { id: req.params.id, ip: req.ip });
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      logger.warn('Validación fallida', { id: req.params.id, errors: errors.array(), ip: req.ip });
      const error = new Error('Validación fallida');
      error.statusCode = 400;
      error.data = errors.array();
      throw error;
    }
    const pool = await poolPromise;
    const result = await pool
      .request()
      .input('id_niño', sql.UniqueIdentifier, req.params.id)
      .execute('sp_ObtenerTutoresPorNiño');
    res.status(200).json(result.recordset);
  } catch (err) {
    logger.error('Error al obtener tutores', { id: req.params.id, error: err.message, ip: req.ip });
    err.statusCode = err.statusCode || 500;
    next(err);
  }
});

module.exports = router;